--- ./node_modules/plywood-druid-requester/build/druidRequester.js	2018-02-06 04:32:16.542502509 -0500
+++ /opt/swiv/node_modules/plywood-druid-requester/build/druidRequester.js	2018-01-10 16:43:55.297741693 -0500
@@ -136,7 +136,8 @@
                 var decorationPromise = requestDecorator({
                     method: options.method,
                     url: options.url,
-                    query: query
+                    query: query,
+                    environment: req.environment,
                 }, context['decoratorContext']);
                 if (decorationPromise) {
                     return Q(decorationPromise).then(function (decoration) {
--- ./node_modules/swiv-plywood/build/plywood.js	2018-02-06 04:32:42.934794414 -0500
+++ /opt/swiv/node_modules/swiv-plywood/build/plywood.js	2018-02-06 04:28:45.256165753 -0500
@@ -3778,14 +3778,14 @@
     External.prototype.getQueryAndPostProcess = function () {
         throw new Error("can not call getQueryAndPostProcess directly");
     };
-    External.prototype.queryValue = function (lastNode, externalForNext) {
+    External.prototype.queryValue = function (lastNode, externalForNext, environment) {
         if (externalForNext === void 0) { externalForNext = null; }
         var _a = this, mode = _a.mode, requester = _a.requester;
         if (!externalForNext)
             externalForNext = this;
         var delegate = this.getDelegate();
         if (delegate) {
-            return delegate.queryValue(lastNode, externalForNext);
+            return delegate.queryValue(lastNode, externalForNext, environment);
         }
         if (!requester) {
             return Q.reject(new Error('must have a requester to make queries'));
@@ -3804,7 +3804,7 @@
         if (next) {
             var results = [];
             finalResult = promiseWhile(function () { return query; }, function () {
-                return requester({ query: query })
+                return requester({ query: query, environment: environment })
                     .then(function (result) {
                     results.push(result);
                     query = next(query, result);
@@ -3815,7 +3815,7 @@
             });
         }
         else {
-            finalResult = requester({ query: query })
+            finalResult = requester({ query: query, environment: environment })
                 .then(queryAndPostProcess.postProcess);
         }
         if (!lastNode && mode === 'split') {
@@ -6581,6 +6581,17 @@
         var op = ex.name.replace('Expression', '').replace(/^\w/, function (s) { return s.toLowerCase(); });
         Expression.classMap[op] = ex;
     };
+    Expression.fromJSEnv = function (expressionJS, env) {
+        var result;
+        Expression.environment = env;
+        try {
+            result = Expression.fromJS(expressionJS);
+        }
+        finally {
+            Expression.environment = null;
+        }
+        return result;
+    }
     Expression.fromJS = function (expressionJS) {
         if (!hasOwnProperty(expressionJS, "op")) {
             throw new Error("op must be defined");
@@ -7354,11 +7365,18 @@
         }
         return introspectDatum(context)
             .then(function (introspectedContext) {
-            var readyExpression = _this._initialPrepare(introspectedContext, environment);
+            Expression.environment = environment;
+            var readyExpression;
+            try {
+                readyExpression = _this._initialPrepare(introspectedContext, environment);
+            }
+            finally {
+                Expression.environment = null;
+            }
             if (readyExpression instanceof ExternalExpression) {
                 readyExpression = readyExpression.unsuppress();
             }
-            return readyExpression._computeResolved(true);
+            return readyExpression._computeResolved(true, environment);
         });
     };
     Expression.defaultParserTimezone = Timezone.UTC;
@@ -7886,11 +7904,11 @@
             return external;
         return external.simulateValue(lastNode, simulatedQueries);
     };
-    ExternalExpression.prototype._computeResolved = function (lastNode) {
+    ExternalExpression.prototype._computeResolved = function (lastNode, environment) {
         var external = this.external;
         if (external.suppress)
             return Q(external);
-        return external.queryValue(lastNode);
+        return external.queryValue(lastNode, null, environment);
     };
     ExternalExpression.prototype.unsuppress = function () {
         var value = this.valueOf();
@@ -7960,6 +7978,7 @@
             }
         }
         this.expression = expression;
+        this.environment = Expression.environment;
         this.actions = actions;
         this.type = type;
     }
@@ -8373,10 +8392,17 @@
     ChainExpression.prototype._computeResolved = function () {
         var _a = this, expression = _a.expression, actions = _a.actions;
         if (expression.isOp('external')) {
-            return expression._computeResolved(false).then(function (exV) {
-                var newExpression = r(exV).performActions(actions).simplify();
+            return expression._computeResolved(false, _a.environment).then(function (exV) {
+                Expression.environment = _a.environment;
+                var newExpression;
+                try {
+                    newExpression = r(exV).performActions(actions).simplify();
+                }
+                finally {
+                    Expression.environment = null;
+                }
                 if (newExpression.hasExternal()) {
-                    return newExpression._computeResolved(true);
+                    return newExpression._computeResolved(true, _a.environment);
                 }
                 else {
                     return newExpression.getFn()(null, null);
@@ -8393,8 +8419,14 @@
                 else if (action instanceof ApplyAction) {
                     if (actionExpression.hasExternal()) {
                         return dataset.applyPromise(action.name, function (d) {
-                            var simpleExpression = actionExpression.resolve(d).simplify();
-                            return simpleExpression._computeResolved(simpleExpression.isOp('external'));
+                            Expression.environment = actionExpression.environment;
+                            try {
+                                var simpleExpression = actionExpression.resolve(d).simplify();
+                            }
+                            finally {
+                                Expression.environment = null;
+                            }
+                            return simpleExpression._computeResolved(simpleExpression.isOp('external'), _a.environment);
                         }, actionExpression.type, null);
                     }
                     else {
@@ -8413,7 +8445,7 @@
                 throw new Error("could not execute action " + action);
             };
         }
-        var promise = expression._computeResolved(false);
+        var promise = expression._computeResolved(false, _a.environment);
         for (var i = 0; i < actions.length; i++) {
             promise = promise.then(execAction(i));
         }
@@ -10269,7 +10301,7 @@
         return new IsAction(Action.jsToValue(parameters));
     };
     IsAction.prototype.getNecessaryInputTypes = function () {
-        return this.expression.type;
+        return [this.expression.type, 'SET/' + this.expression.type];
     };
     IsAction.prototype.getOutputType = function (inputType) {
         var expressionType = this.expression.type;
--- ./node_modules/swiv-plywood/build/expressions/baseExpression.d.ts	2018-02-06 04:33:12.935126223 -0500
+++ /opt/swiv/node_modules/swiv-plywood/build/expressions/baseExpression.d.ts	2018-01-10 16:57:08.237668268 -0500
@@ -127,6 +127,7 @@
     static classMap: Lookup<typeof Expression>;
     static register(ex: typeof Expression): void;
     static fromJS(expressionJS: ExpressionJS): Expression;
+    static fromJSEnv(expressionJS: ExpressionJS, env: any): Expression;
     op: string;
     type: PlyType;
     simple: boolean;
--- ./node_modules/numeral/numeral.js   2018-05-08 06:11:36.564325401 -0400
+++ /opt/swiv/node_modules/numeral/numeral.js     2018-05-08 06:11:25.800202499 -0400
@@ -314,7 +314,7 @@
                     min = Math.pow(1024, power);
                     max = Math.pow(1024, power+1);

-                    if (value >= min && value < max) {
+                    if (abs >= min && abs < max) {
                         bytes = bytes + suffixes[power];
                         if (min > 0) {
                             value = value / min;
